use std::collections::HashMap;

use crate::CallbackBack;

pub struct TcpRouter {
    pub actions: HashMap<u32, TcpRsFn>,
}

impl TcpRouter {
    fn new() -> Self { TcpRouter { actions: HashMap::new() } }
}

pub enum TcpRsFn<T = Vec<u8>> {
    Func1(Box<dyn Fn(T)>),
    Func2(Box<dyn Fn(u32, T)>),
    Func3(Box<dyn Fn(u32, T, Box<dyn Fn(u32, Vec<u8>)>)>),
}

impl CallbackBack<(usize, Vec<u8>)> for TcpRouter {
    type CallbackType = TcpRsFn;

    fn name(&self) -> &str {
        "tcp-router"
    }

    fn init(&mut self) {
        self.actions.insert(1000, TcpRsFn::Func1(Box::new(demo001)));
        self.actions.insert(1001, TcpRsFn::Func2(Box::new(demo002)));
        self.actions.insert(1002, TcpRsFn::Func3(Box::new(demo003)));
    }

    fn callback(&self, args: (usize, Vec<u8>)) {
        if let Some(function) = self.actions.get(&(args.0 as u32)) {
            match function {
                TcpRsFn::Func1(func) => func(args.1.into()),
                TcpRsFn::Func2(func) => func(args.0 as u32, args.1.into()),
                TcpRsFn::Func3(func) => func(args.0 as u32, args.1.into(), Box::new(|id: u32, data: Vec<u8>| {}))
            }

            return;
        }

        eprintln!("{} 协议号不存在: ({})", self.name(), args.0);
    }
}

pub fn demo001(data: Vec<u8>) { todo!() }

pub fn demo002(id: u32, data: Vec<u8>) { todo!() }

pub fn demo003(id: u32, data: Vec<u8>, func: Box<dyn Fn(u32, Vec<u8>)>) { todo!() }

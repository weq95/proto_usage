use std::collections::HashMap;
use std::io::{Error, Result};
use std::sync::{Arc, Mutex};

use tokio::net::TcpStream;

use crate::manager::{client::Client, server::Server};

const MAX_BUFF_SIZE: usize = 8192;

pub trait InitRouter<T = (u32, Vec<u8>)> {
    fn name(&self) -> &str;
    fn init(&mut self);
    fn header_len(&self) -> u8;
    fn protocol_len(&self) -> u8;
    fn callback(&self, args: T);
}

pub trait TcpClients: InitRouter {
    fn name(&self) -> &str;
    fn add_client(&mut self, ip_addr: &str, conn: TcpStream);
    fn serviceable(&self, ip_addr: &str, port: u16);
    fn get_client_ips(&self) -> Vec<&str>;
    fn delete_client(&mut self, ip_addr: &str);
    fn center_forwarding(&self, ip_addr: &str, protocol: u32, data: &[u8]) -> Result<()>;
}

struct Manager<S, C> {
    clients: HashMap<&'static str, Arc<Client<C>>>,
    servers: HashMap<&'static str, Arc<Server<S>>>,
}

impl<S, C> Manager<S, C>
    where C: InitRouter + Send + Sync + 'static,
          S: TcpClients + Send + Sync + 'static {
    fn add_client(&mut self, mut clients: HashMap<&str, Box<C>>) -> Result<()> {
        for (ip_addr, router) in clients.iter_mut() {
            if ip_addr.trim_matches(' ') == "" {
                return Err(Error::from("IP地址必须填写"));
            }

            if self.clients.contains_key(ip_addr) {
                return Err(Error::from(format!("[{}] 名称已存在", router.name())));
            }
            router.init();
            let client_conn = Client::new(ip_addr, router.clone())?;

            self.clients.insert(ip_addr, Arc::new(client_conn));
        }

        self.loop_read()
    }

    fn add_server(&mut self, servers: HashMap<&str, Box<dyn InitRouter>>) -> Result<()> {
        for (ip_addr, router) in servers.iter() {}

        Ok(())
    }

    fn get_manager() -> Self {
        Manager
    }

    fn get_client(name: &str) -> Result<()> {
        Ok(())
    }

    fn get_server() -> Result<()> {
        Ok(())
    }


    fn loop_read(&mut self) -> Result<()> {
        for (ip_addr, client) in self.clients.iter_mut() {
            let mut client = client.clone();
            tokio::spawn(async move {});
        }

        self.heartbeat()
    }

    fn heartbeat(&self) -> Result<()> {
        todo!()
    }

    fn client_closed(&mut self) {
        todo!()
    }

    fn server_closed(&mut self) {
        todo!()
    }
}

pub enum EnumRouter {
    Client,
    Server,
}

pub struct Reader {
    srv: EnumRouter,
    buff: Vec<u8>,
    start: usize,
    end: usize,
    max_buff_size: usize,
}

impl Reader {
    pub fn new_reader(reader: EnumRouter) -> Self {
        todo!()
    }

    pub fn read(&mut self, conn: Option<Arc<Mutex<TcpStream>>>) -> Result<()> {
        todo!()
    }

    pub fn process_data(&mut self) -> Result<()> {
        todo!()
    }
}

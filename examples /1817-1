use std::io::{Error, Result};
use std::sync::{Arc, Mutex};

use regex::Regex;
use tokio::{
    io::{AsyncReadExt, AsyncWriteExt},
    net::TcpStream,
    time::{Duration, timeout},
};

use crate::manager::mgr::{EnumRouter, InitRouter, Reader};

pub struct Client<T> {
    pub addr: &'static str,
    pub closed: bool,
    pub conn: Option<Arc<Mutex<TcpStream>>>,
    pub retries_times: u8,
    pub router: T,
}

impl<T> Client<T>
    where
        T: InitRouter + Send + Sync + 'static,
{
    pub fn new(addr: &str, mut core: Box<T>) -> Result<Self> {
        Ok(Self {
            addr: addr,
            closed: true,
            conn: None,
            retries_times: 3,
            router: core,
        })
    }

    pub fn is_valid_ipv4(ip: &str) -> Result<bool> {
        Ok(Regex::new(r"^(\d{1,3}\.){3}\d{1,3}$")?.is_match(ip))
    }

    pub fn is_valid_ipv6(ip: &str) -> Result<bool> {
        Ok(Regex::new(r"^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$")?.is_match(ip))
    }

    pub async fn connect(&mut self) -> Result<()> {
        if !Self::is_valid_ipv4(self.addr) || !Self::is_valid_ipv6(self.addr) {
            return Err(Error::from(format!("[{}]不是一个有效的IP地址", self.addr)));
        }

        self.closed = true;
        let conn = timeout(Duration::from_secs(15), TcpStream::connect(self.addr)).await??;
        self.conn = Some(Arc::new(Mutex::new(conn)));
        self.closed = false;

        Ok(())
    }

    pub fn handle_conn(&mut self) -> Result<()> {
        if self.closed || self.conn.is_none() {
            return Ok(());
        }

        let mut reader = Reader::new_reader(EnumRouter::Client);

        loop {
            if let Err(e) = reader.read(self.conn.clone()) {
                return Err(Error::from(e.to_string()));
            }
        }
    }

    async fn read(&mut self) -> Result<()> {
        if self.conn.is_none() {
            return Ok(());
        }

        let core = self.router.clone();
        eprintln!(
            "tcp_client({}) start listening on {}",
            core.name(),
            &self.addr
        );

        let h_len = core.header_len() as usize;
        let p_len = core.protocol_len() as usize;
        let conn = self.conn.clone().unwrap();
        tokio::spawn(async move {
            let mut conn = conn.lock().await;
            let mut buff: Vec<u8> = Vec::with_capacity(MAX_BUFF_SIZE);
            let mut hd_buff: Vec<u8> = Vec::with_capacity(h_len);
            let mut protocol: usize = 0;
            let mut body_len: usize = 0;
            let mut buff_len: usize = 0;

            loop {
                let n = conn.read_exact(&mut buff[buff_len..]).await.unwrap();
                if n == 0 {
                    break;
                }
                buff_len += n;

                if body_len == 0 && buff.len() >= h_len {
                    hd_buff.copy_from_slice(&buff[..h_len]);
                    protocol = match p_len {
                        8 => u64::from_be_bytes(hd_buff.clone().try_into().unwrap()) as usize,
                        4 => u32::from_be_bytes(hd_buff.clone().try_into().unwrap()) as usize,
                        2 | _ => u16::from_be_bytes(hd_buff.clone().try_into().unwrap()) as usize,
                    };

                    let others = &buff[h_len - p_len..h_len];
                    body_len = match h_len - p_len {
                        8 => u64::from_be_bytes(others.try_into().unwrap()) as usize,
                        4 => u32::from_be_bytes(others.try_into().unwrap()) as usize,
                        2 | _ => u16::from_be_bytes(others.try_into().unwrap()) as usize,
                    };

                    // 清除已读的头部内容
                    buff.copy_within((buff_len - h_len)..buff_len, 0);
                    buff_len -= h_len;
                }

                if buff_len >= body_len {
                    core.callback((protocol as u32, buff[..body_len].to_owned()));

                    buff.copy_within((buff_len - body_len)..buff_len, 0);
                    buff_len -= body_len;
                    protocol = 0;
                    body_len = 0;
                }
            }
        });

        Ok::<(), Error>(())
    }

    async fn write(&self, protocol: usize, data: &[u8]) -> Result<()> {
        if self.conn.is_none() {
            let closed = self.closed.lock().await;
            if !(*closed) {
                return Ok(());
            }
        }

        let h_len = self.router.header_len() as usize;
        let mut buffer = Vec::with_capacity(h_len + data.len());
        match self.router.protocol_len() as usize {
            8 => buffer.write_u64(protocol as u64).await?,
            4 => buffer.write_u32(protocol as u32).await?,
            2 | _ => buffer.write_u16(protocol as u16).await?,
        }
        match h_len - (self.router.protocol_len() as usize) {
            8 => buffer.write_u64(data.len() as u64).await?,
            4 => buffer.write_u32(data.len() as u32).await?,
            2 | _ => buffer.write_u16(data.len() as u16).await?,
        }

        buffer.extend_from_slice(&data[..]);
        let conn = self.conn.clone().unwrap();
        let mut conn_lock = conn.lock().await;
        Ok(conn_lock.write_all(&buffer[..]).await?)
    }
}
